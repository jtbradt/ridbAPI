# Create path:
path <- paste("api", pkg.env$api.version, "facilities", paste(NULL, collapse = "/"), sep = "/")
# Query FSF API:
url <- httr::modify_url("https://ridb.recreation.gov/", path = path)
resp <- httr::GET(url, query = list(apikey = pkg.env$api.key))
# Parse response:
parsed <- jsonlite::fromJSON(httr::content(resp, as = "text", encoding = "UTF-8"))
total <- parsed$METADATA$RESULTS$TOTAL_COUNT
startvals <- seq(50, total, 50)
parsed.remaining <- lapply(startvals[1:2], function(s){
# Create path:
temp.path <- paste("api", pkg.env$api.version, "facilities", paste(NULL, collapse = "/"), sep = "/")
# Query FSF API:
temp.url <- httr::modify_url("https://ridb.recreation.gov/", path = temp.path)
temp.resp <- httr::GET(temp.url, query = list(apikey = pkg.env$api.key, offset = s))
# Parse response:
temp.parsed <- jsonlite::fromJSON(httr::content(temp.resp, as = "text", encoding = "UTF-8"))
# Extract data (remove metadata):
temp.return <- temp.parsed[[1]]
return(temp.return)
})
# Create path:
temp.path <- paste("api", pkg.env$api.version, "facilities", paste(NULL, collapse = "/"), sep = "/")
# Query FSF API:
temp.url <- httr::modify_url("https://ridb.recreation.gov/", path = temp.path)
temp.resp <- httr::GET(temp.url, query = list(apikey = pkg.env$api.key, offset = startvals[2]))
# Parse response:
temp.parsed <- jsonlite::fromJSON(httr::content(temp.resp, as = "text", encoding = "UTF-8"))
# Extract data (remove metadata):
temp.return <- temp.parsed[[1]]
"GEOJSON" %in% colnames(temp.return)
geometry <- process.geometry(temp.return$GEOJSON)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
geometry <- process.geometry(temp.return$GEOJSON)
temp.return[,colnames(temp.return) != "GEOJSON"]
temp.return <- dplyr::bind_cols(temp.return[,colnames(temp.return) != "GEOJSON"], geometry)
parsed.remaining <- lapply(startvals[1:2], function(s){
# Create path:
temp.path <- paste("api", pkg.env$api.version, "facilities", paste(NULL, collapse = "/"), sep = "/")
# Query FSF API:
temp.url <- httr::modify_url("https://ridb.recreation.gov/", path = temp.path)
temp.resp <- httr::GET(temp.url, query = list(apikey = pkg.env$api.key, offset = s))
# Parse response:
temp.parsed <- jsonlite::fromJSON(httr::content(temp.resp, as = "text", encoding = "UTF-8"))
# Extract data (remove metadata):
temp.return <- temp.parsed[[1]]
# If GEOJSON data returned, process:
if ("GEOJSON" %in% colnames(temp.return)) {
# Process geometry data:
geometry <- process.geometry(temp.return$GEOJSON)
# Bind processed geometry data to non-geom data:
temp.return <- dplyr::bind_cols(temp.return[,colnames(temp.return) != "GEOJSON"], geometry)
}
return(temp.return)
})
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
parsed.remaining <- lapply(startvals[1:2], function(s){
# Create path:
temp.path <- paste("api", pkg.env$api.version, "facilities", paste(NULL, collapse = "/"), sep = "/")
# Query FSF API:
temp.url <- httr::modify_url("https://ridb.recreation.gov/", path = temp.path)
temp.resp <- httr::GET(temp.url, query = list(apikey = pkg.env$api.key, offset = s))
# Parse response:
temp.parsed <- jsonlite::fromJSON(httr::content(temp.resp, as = "text", encoding = "UTF-8"))
# Extract data and process geometry data (remove metadata):
temp.return <- process.geometry(temp.parsed[[1]])
return(temp.return)
})
# Combine parsed returns:
return.initial <- process.geometry(parsed[[1]])
# Combine parsed returns:
parsed.initial <- process.geometry(parsed[[1]])
return.full <- dplyr::bind_rows(list(parsed.initial, parsed.remaining))
return.full <- rbind((list(parsed.initial, parsed.remaining))
)
rbind((list(parsed.initial, parsed.remaining)))
rbind(c(parsed.initial, parsed.remaining))
return.full <- do.call(rbind, c(parsed.initial, parsed.remaining))
return.full <- do.call(rbind, list(parsed.initial, parsed.remaining))
list(parsed.initial, parsed.remaining)
return.full <- dplyr::bind_rows(c(parsed.initial, parsed.remaining))
return.full <- dplyr::bind_rows(list(parsed.initial, parsed.remaining))
dplyr::bind_rows(parsed.remaining)
return.full <- dplyr::bind_rows(append(parsed.initial, parsed.remaining))
class(parsed.initial)
class(parsed.remaining[[1]])
test <- c(parsed.initial, parsed.remaining)
View(test)
test <- c(t(parsed.initial), parsed.remaining)
test <- c(data.table(parsed.initial), parsed.remaining)
test <- c(data.frame(parsed.initial), parsed.remaining)
View(test)
test <- c(data.table::data.table(parsed.initial), parsed.remaining)
View(test)
test <- list(data.table::data.table(parsed.initial), parsed.remaining)
View(test)
# Combine parsed returns:
parsed.remainind[[1]] <- process.geometry(parsed[[1]])
# Combine parsed returns:
parsed.remaining[[3]] <- process.geometry(parsed[[1]])
return.full <- dplyr::bind_rows(parsed.remaining)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
test <- ridbAPI::ridb.query("activities", NULL)
test <- ridbAPI::ridb.query("activities", "6")
test <- ridbAPI::activities()
test <- ridbAPI::ridb.query("facilities", "10000167")
class(test)
View(test)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
test <- ridbAPI::ridb.query("facilities", "10000167")
View(test)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
test <- ridbAPI::ridb.query("facilities", "10000167")
View(test)
# Create path:
path <- paste("api", pkg.env$api.version, "facilities", paste("10000167", collapse = "/"), sep = "/")
# Query FSF API:
url <- httr::modify_url("https://ridb.recreation.gov/", path = path)
resp <- httr::GET(url, query = list(apikey = pkg.env$api.key))
# Parse response:
parsed <- jsonlite::fromJSON(httr::content(resp, as = "text", encoding = "UTF-8"))
length(parsed) == 0
length(parsed) == 2
class(parsed) == "list"
data.frame(parsed)
return.full <- process.geometry(parsed)
return.full <- data.table::data.table(t(parsed))
return.full <- process.geometry(return.full)
View(return.full)
#' Process geometry function
#'
#' This function process geometry returns from the FSF APIs:
#' @param data is the relevant data from parsed API response
#' @keywords process.geometry
#' @export
data <- return.full
"GEOJSON" %in% colnames(data)
geometry <- data$GEOJSON$COORDINATES
return.full <- process.geometry(parsed)
#' Process geometry function
#'
#' This function process geometry returns from the FSF APIs:
#' @param data is the relevant data from parsed API response
#' @keywords process.geometry
#' @export
data <- parsed
"GEOJSON" %in% colnames(data)
"GEOJSON" %in% names(data)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
return.full <- process.geometry(parsed)
data <- parsed
"GEOJSON" %in% names(data)
geometry <- data$GEOJSON$COORDINATES
type <- data$GEOJSON$TYPE
unique(type)[unique(type)!=""] %in% c("Point", "point", "POINT")
geometry <- lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
} else {
x <- x
}
})
geometry <- data$GEOJSON$COORDINATES
geometry.sf <- sf::st_set_crs(sf::st_as_sf(geometry, coords = c(1,2)), 4326)
geometry <- data.frame(do.call(rbind, geometry))
# Extract geometry data from parsed response:
geometry <- data$GEOJSON$COORDINATES
geometry <- data.frame(geometry)
# Convert to sfc:
geometry.sf <- sf::st_set_crs(sf::st_as_sf(geometry, coords = c(1,2)), 4326)
sf::st_as_sf(geometry, coords = c(1,2))
# Extract geometry data from parsed response:
geometry <- data$GEOJSON$COORDINATES
geometry <- data.frame(t(geometry))
# Convert to sfc:
geometry.sf <- sf::st_set_crs(sf::st_as_sf(geometry, coords = c(1,2)), 4326)
devtools::load_all()
return.full <- process.geometry(parsed)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
return.full <- process.geometry(parsed)
data <- parsed
"GEOJSON" %in% names(data)
geometry <- data$GEOJSON$COORDINATES
# Extract geometry type from parsed response:
type <- data$GEOJSON$TYPE
unique(type)[unique(type)!=""] %in% c("Point", "point", "POINT")
class(geometry) == "list"
geometry <- data.frame(t(geometry))
geometry.sf <- sf::st_set_crs(sf::st_as_sf(geometry, coords = c(1,2)), 4326)
data[,names(data) != "GEOJSON"]
data[names(data) != "GEOJSON"]
return.full <- data.frame(t(parsed))
return.full <- process.geometry(return.full)
data <- return.full
"GEOJSON" %in% names(data)
geometry <- data$GEOJSON$COORDINATES
return.full <- data.table::data.table(t(parsed))
return.full <- process.geometry(return.full)
data.table::data.table(t(parsed))
data <- return.full
"GEOJSON" %in% names(data)
geometry <- data$GEOJSON$COORDINATES
data$GEOJSON
data$GEOJSON$COORDINATES
View(data)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
return.full <- process.geometry(parsed)
return.full <- data.frame(process.geometry(parsed))
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
return.full <- process.geometry(parsed)
return.full <- data.frame(process.geometry(parsed))
View(return.full)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
test <- ridbAPI::ridb.query("facilities", "10000167")
test <- ridbAPI::ridb.query("activities", NULL)
test <- ridbAPI::ridb.query("activities", "6")
system.time(test <- ridbAPI::ridb.query("facilities", NULL))
warnings()
sessionInfo()
install.packages("tidyverse")
sessionInfo()
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
sessionInfo()
pacman::p_load("tidyverse")
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
system.time(test <- ridbAPI::ridb.query("facilities", NULL))
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
system.time(test <- ridbAPI::ridb.query("facilities", NULL))
nrow(dplyr::distinct(test))
View(test)
length(unique(test$FacilityID))
plot(st_geometry(test))
plot(sf::st_geometry(test))
plot(sf::st_geometry(sf::st_as_sf(test)))
devtools::load_all()
devtools::document()
usethis::use_tidy_style()
install.packages("styler")
styler::style_dir()
full.data <- lapply(test, function(f){
sub.data <- lapply(c("events"), function(d){
temp.query <- ridb.query("facilities", c(f$FacilityID, d))
})
})
lapply(test, function(x){x$FacilityID})
full.data <- lapply(1:nrow(test), function(f){
sub.data <- lapply(c("events"), function(d){
temp.query <- ridb.query("facilities", c(test[f,]$FacilityID, d))
})
)
full.data <- lapply(1:nrow(test), function(f){
sub.data <- lapply(c("events"), function(d){
temp.query <- ridb.query("facilities", c(test[f,]$FacilityID, d))
})
})
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
full.data <- lapply(1:nrow(test), function(f){
sub.data <- lapply(c("events"), function(d){
temp.query <- ridb.query("facilities", c(test[f,]$FacilityID, d))
})
})
test <- ridb.query("facilities", c(NULL, "events"))
test <- ridb.query("facilities", c(test[1,]$FacilityID, "events"))
test <- ridb.query("facilities", c(test[10,]$FacilityID, "events"))
test <- ridb.query()
test <- ridb.query("facilities", NULL)
full.data <- lapply(1:10, function(f){
sub.data <- lapply(c("events"), function(d){
temp.query <- ridb.query("facilities", c(test[f,]$FacilityID, d))
})
})
system.time(full.data <- lapply(1:100, function(f){
sub.data <- lapply(c("events"), function(d){
temp.query <- ridb.query("facilities", c(test[f,]$FacilityID, d))
})
}))
system.time(full.data <- parallel::mclapply(1:100, function(f){
sub.data <- lapply(c("events"), function(d){
temp.query <- ridb.query("facilities", c(test[f,]$FacilityID, d))
})
}))
system.time(full.data <- parallel::mclapply(1:1000, function(f){
sub.data <- lapply(c("events"), function(d){
temp.query <- ridb.query("facilities", c(test[f,]$FacilityID, d))
})
}))
fac <- test[1:10,]$FacilityID
query <- lapply(fac, function(f){
temp.query <- ridb.query("facilities", c(f, "events"))
})
View(query)
query <- lapply(fac, function(f){
temp.query <- ridb.query("facilities", c(f, "campsites"))
})
View(query)
View(test)
fac <- test[1:50,]$FacilityID
query <- lapply(fac, function(f){
temp.query <- ridb.query("facilities", c(f, "campsites"))
})
View(query)
directory <-
"/Users/jakebradt/Documents/Research/2020.03 -- Okefenokee/"
setwd(directory)
pacman::p_load(tidyverse, data.table)
# Import Data --------------------------------------------------------
reservations <- fread(paste0(directory, "projectDirectory/data/raw/reservations2019.csv"))
names(reservations)
reservations <- fread(paste0(directory, "projectDirectory/data/raw/reservations2017.csv"))
reservations <- fread(paste0(directory, "projectDirectory/data/raw/2017.csv"))
names(reservations)
nrow(unique(reservations$HistoricalReservationID))
length(unique(reservations$HistoricalReservationID))
test <- ridb.query("recareas", NULL)
View(test)
orgs <- ridb.query("organizations", NULL)
View(orgs)
View(full.data)
View(query)
query[[50]][["CampsiteID"]]
ridb.query("campsites", "10009936")
query[[50]][["ATTRIBUTES"]]
campsite <- ridb.query("campsites", "10009936")
campsite <- ridb.query("campsites", c("10009936", "attribute"))
campsite <- ridb.query("campsites", c("10009936", "attributes"))
View(campsite)
# Retrieve all campsite metadata:
query <- ridb.query("campsites", NULL)
# Query non-attribute data:
temp.query <- ridb.query("campsites", "10009936")
attribute <- ridb.query("campsites", c("10009936", "attributes"))
t(attribute)
data.frame(t(attribute$AttributeValue))
attribute.reshaped <- data.frame(t(attribute$AttributeValue))
names(attribute.reshaped) <- attribute$AttributeName
View(attribute.reshaped)
names(attribute.reshaped)
temp.query <- cbind(temp.query, attribute.reshaped)
View(temp.query)
names(attribute.reshaped) <- gsub(" ", "", attribute$AttributeName, fixed = TRUE)
attribute.reshaped
campsites <- c("10009936", "10009922", "10009915" ,"10009914" ,"10009916")
attributes <- TRUE
query <- lapply(campsites, function(c){
# Query non-attribute data:
temp.query <- ridb.query("campsites", c)
# If attributes requested, return attribute data:
if (attributes == TRUE) {
attribute <- ridb.query("campsites", c(c, "attributes"))
attribute.reshaped <- data.frame(t(attribute$AttributeValue))
names(attribute.reshaped) <- gsub(" ", "", attribute$AttributeName, fixed = TRUE)
temp.query <- cbind(temp.query, attribute.reshaped)
}
return(temp.query)
})
# Bind list of returned campsite data:
return <- do.call(rbind, query)
View(query)
attribute
attribute <- ridb.query("campsites", c(c, "attributes"))
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
attribute <- ridb.query("campsites", c(c, "attributes"))
attribute <- ridb.query("campsites", c(campsites[1], "attributes"))
# Query non-attribute data:
temp.query <- ridb.query("campsites", campsites[1])
View(temp.query)
ridb.query("campsites", campsites[1])
View(campsite)
reservations$FacilityID
head(reservations)
ridb.query("recareas", "72630")
ridb.query("facilities", "233053")
recareas <- ridb.query("recareas",NULL)
View(recareas)
"72630" %in% recareas$RecAreaID
campsites <- function(lookup.type, lookup.args) {
# If lookup.type is not 'campsites', execute query:
if (lookup.type != "campsites") {
# Execute query:
query <- lapply(lookup.args, function(a){
ridb.query(lookup.type, c("campsites", a))
})
} else {
# Execute query:
query <- lapply(lookup.args, function(a){
ridb.query(lookup.type, a)
})
}
return(query)
}
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
recareas$RecAreaID
campsites("recareas", "460")
temp.query$FacilityID
campsites("facilities", "10000305")
campsites <- function(lookup.type, lookup.args) {
# If lookup.type is not 'campsites', execute query:
if (lookup.type != "campsites") {
# Execute query:
query <- lapply(lookup.args, function(a){
ridb.query(lookup.type, c(a, "campsites"))
})
} else {
# Execute query:
query <- lapply(lookup.args, function(a){
ridb.query(lookup.type, a)
})
}
return(query)
}
campsites("facilities", "10000305")
test <- campsites("facilities", "10000305")
View(test)
campsites <- function(lookup.type, lookup.args) {
# If lookup.type is not 'campsites', execute query:
if (lookup.type != "campsites") {
# Execute query:
query <- lapply(lookup.args, function(a){
ridb.query(lookup.type, c(a, "campsites"))
})
} else {
# Execute query:
query <- lapply(lookup.args, function(a){
ridb.query(lookup.type, a)
})
}
query <- do.call(rbind, query)
return(query)
}
campsites("facilities", "10000305")
test <- campsites("facilities", "10000305")
View(test)
View(test[[12]][[1]])
View(test[[14]][[1]])
View(test[[14]][[20]])
View(test[[13]][[18]])
View(test[[13]][[14]])
View(test[[12]][[1]])
# Bind return rows:
full.query <- do.call(rbind, query)
unique(reservations$UseType)
head(reservations[reservations$UseType=="Day",])
unique(reservations$SiteType)
use.types <- reservations %>% group_by(SiteType) %>%summarise(n())
View(use.types)
activities <- function(lookup.type, lookup.args) {
# If lookup.type is not 'activities', execute query:
if (lookup.type != "activities") {
# If lookup.args is null, return error:
if (is.null(lookup.args)) {
stop(paste0("Cannot query all '", lookup.type, "' activities; please supply a vector of arguments to query."))
} else {
# Execute query:
query <- lapply(lookup.args, function(a){
ridb.query(lookup.type, c(a, "activities"))
})
}
} else {
# Execute query:
query <- lapply(lookup.args, function(a){
ridb.query(lookup.type, a)
})
}
# Bind return rows:
full.query <- do.call(rbind, query)
return(full.query)
}
activities <- activities("recareas", "2624")
View(activities)
activities("activities", NULL)
activities("activities" "8")
activities("activities", "8")
devtools::load_all()
pwd()
pwd
wd()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
test <- ridbAPI::activities("recareas", "2624")
activities <- ridbAPI::activities("activities", NULL)
devtools::load_all()
activities <- ridbAPI::activities("activities", NULL)
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
activities <- ridbAPI::activities("activities", NULL)
View(activities)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
activities <- ridbAPI::activities("activities", NULL)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
activities <- ridbAPI::activities("activities", NULL)
View(activities)
