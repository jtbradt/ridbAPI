temp.return <- temp.parsed[[1]]
}
return(temp.return)
})
View(parsed.remaining)
View(parsed.remaining[[1]])
return.full <- data.table::rbindlist(c(list(parsed[[1]]), parsed.remaining))
c(list(parsed[[1]]), parsed.remaining)
return.full <- data.table::rbindlist(parsed.remaining)
return.full <- do.call(rbind, parsed.remaining)
return.full <- rbind(parsed.remaining[[1]], parsed.remaining[[2]])
parsed.remaining <- lapply(startvals[1:2], function(s){
# Create path:
temp.path <- paste("api", pkg.env$api.version, "facilities", paste(NULL, collapse = "/"), sep = "/")
# Query FSF API:
temp.url <- httr::modify_url("https://ridb.recreation.gov/", path = temp.path)
temp.resp <- httr::GET(temp.url, query = list(apikey = pkg.env$api.key, offset = s))
# Parse response:
temp.parsed <- jsonlite::fromJSON(httr::content(temp.resp, as = "text", encoding = "UTF-8"))
temp.return <- temp.parsed[[1]]
return(temp.return)
})
test <- tidyr::unnest(parsed.remaining[[1]], col = "GEOJSON")
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
test <- process.geometry(parsed.remaining[[1]]$GEOJSON)
# Extract geometry data from parsed response:
geometry <- parsed.remaining[[1]]$GEOJSON$COORDINATES
class(geometry)
geometry <- lapply(geometry, function(g) {
if (class(g) == "list") {
temp <- g
}
if (class(g) == "array") {
temp <- lapply(seq(dim(g)[1]), function(j) {
g[j, , ]
})
}
return(temp)
})
class(geometry[[1]]
class(geometry[[1]])
class(geometry[[1]])
class(geometry[[2]])
rbind(geometry)
test <- rbind(geometry)
View(test)
geometry[[1]]
geometry[[2]]
pacman::p_load(geojsonsf)
geojsonsf::geojson_sf(parsed.remaining[[1]]$GEOJSON)
Reduce(merge, geometry)
geometry[[2]]
rbind(geometry)
test <- rbind(geometry)
View(test)
test <-data.frame(geometry)
test <- data.table::data.table(geometry)
test
type <- geometry.data$TYPE
geometry.data <- parsed.remaining[[1]]$GEOJSON
# Extract geometry data from parsed response:
geometry <- data.table::data.table(geometry.data$COORDINATES)
# Extract geometry type from parsed response:
type <- geometry.data$TYPE
type
# Construct full geo DT:
geo.dt <- dplyr::bind_cols(type, geometry)
# Extract geometry type from parsed response:
type <- data.table::data.table(geometry.data$TYPE)
# Construct full geo DT:
geo.dt <- dplyr::bind_cols(type, geometry)
View(geo.dt)
geometry
# Extract geometry data from parsed response:
geometry <- dplyr::unnest(data.table::data.table(geometry.data$COORDINATES))
# Extract geometry data from parsed response:
geometry <- tidyr::unnest(data.table::data.table(geometry.data$COORDINATES))
geometry
unlist(geometry.data$COORDINATES)
geo.dt
names(geo.dt) <- c("type", "geo")
geo.dt
# Convert to sf object:
geometry.sfc <- sf::st_set_crs(sf::st_sfc(sf::st_point(geometry)), 4326)
tidyr::separate(geometry)
tidyr::separate(geometry, "V1")
geometry
geometry <- data.table::data.table(geometry.data$COORDINATES)
geometry
View(geometry)
geometry[, c("long", "lat") := tstrsplit(V1, ",", fixed=TRUE)]
geometry[, c("long", "lat") := data.table::tstrsplit(V1, ",", fixed=TRUE)]
View(geometry)
geometry.data$COORDINATES
geometry <- geometry.data$COORDINATES
matrix(geometry, nrow = length(geometry), ncol = 2)
unlist(geometry)
lapply(geometry, function(x){
x <- data.frame(x)
})
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
lapply(geometry, function(x){
x <- data.table::data.table(x)
})
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
lapply(geometry, function(x){
x <- data.table::data.table(t(x))
})
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
lapply(geometry, function(x){
x <- t(data.table::data.table(x))
})
do.call(rbind, geometry)
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
}
x <- t(data.table::data.table(x))
})
do.call(rbind, geometry)
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
is.null(geometry[[1]])
geometry[[1]]<-c(0,0)
geometry <- geometry.data$COORDINATES
lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
}
x <- t(data.table::data.table(x))
})
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
do.call(rbind, geometry)
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
geometry <- lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
}
})
do.call(rbind, geometry)
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
}
})
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
} else {
x <- x
}
})
do.call(rbind, geometry)
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
geometry <- lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
} else {
x <- x
}
})
do.call(rbind, geometry)
geometry.sfc <- sf::st_set_crs(sf::st_sfc(sf::st_point(geometry)), 4326)
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
geometry <- lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
} else {
x <- x
}
})
geometry <- do.call(rbind, geometry)
# Convert to sf object:
geometry.sfc <- sf::st_set_crs(sf::st_sfc(sf::st_point(geometry)), 4326)
sf::st_point(geometry)
geometry <- data.table::data.table(do.call(rbind, geometry))
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
geometry <- lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
} else {
x <- x
}
})
geometry <- data.table::data.table(do.call(rbind, geometry))
sf::st_point(geometry)
View(geometry)
is.numeric(geometry)
is.numeric(geometry$V1)
geometry <- geometry.data$COORDINATES
geometry <- lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
} else {
x <- x
}
})
geometry <- do.call(rbind, geometry)
is.numeric(geometry)
sf::st_point(geometry)
# Convert to sf object:
sf::st_as_sf(geometry)
geometry <- geometry.data$COORDINATES
geometry <- lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
} else {
x <- x
}
})
geometry <- data.frame(do.call(rbind, geometry))
sf::st_as_sf(geometry)
# Convert to sf object:
sf::st_as_sf(geometry, coords = c(1,2))
# Extract geometry data from parsed response:
geometry <- geometry.data$COORDINATES
class(geometry)
geometry <- lapply(seq(dim(geometry)[2]), function(i) {
geometry[, i, , ] <- lapply(seq(dim(geometry)[1]), function(j) {
geometry[j, , , ]
})
})
dim(geometry)[2]
geometry
geometry <- geometry.data$COORDINATES
# Convert to sf object:
sf::st_as_sfc(geometry, coords = c(1,2))
# Convert to sf object:
sf::st_as_sf(geometry, coords = c(1,2))
geometry <- geometry.data$COORDINATES
geometry <- lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
} else {
x <- x
}
})
geometry <- data.frame(do.call(rbind, geometry))
# Convert to sf object:
sf::st_as_sfc(geometry, coords = c(1,2))
# Convert to sf object:
sf::st_as_sf(geometry, coords = c(1,2))
unique(type)
type <- geometry.data$TYPE
unique(type)
unique(type)[-""]
unique(type)[""]
unique(type)["Point"]
type.unique <- unique(type)
type.unique <- type.unique[!=""]
type.unique <- type.unique[type.unique!=""]
unique(type)[unique(type)!=""]
unique(type)[unique(type)!=""] %in% c("Point", "point", "POINT")
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
# Create path:
path <- paste("api", pkg.env$api.version, "facilities", paste(NULL, collapse = "/"), sep = "/")
# Query FSF API:
url <- httr::modify_url("https://ridb.recreation.gov/", path = path)
resp <- httr::GET(url, query = list(apikey = pkg.env$api.key))
# Parse response:
parsed <- jsonlite::fromJSON(httr::content(resp, as = "text", encoding = "UTF-8"))
total <- parsed$METADATA$RESULTS$TOTAL_COUNT
startvals <- seq(50, total, 50)
parsed.remaining <- lapply(startvals[1:2], function(s){
# Create path:
temp.path <- paste("api", pkg.env$api.version, "facilities", paste(NULL, collapse = "/"), sep = "/")
# Query FSF API:
temp.url <- httr::modify_url("https://ridb.recreation.gov/", path = temp.path)
temp.resp <- httr::GET(temp.url, query = list(apikey = pkg.env$api.key, offset = s))
# Parse response:
temp.parsed <- jsonlite::fromJSON(httr::content(temp.resp, as = "text", encoding = "UTF-8"))
# Extract data (remove metadata):
temp.return <- temp.parsed[[1]]
return(temp.return)
})
# Create path:
temp.path <- paste("api", pkg.env$api.version, "facilities", paste(NULL, collapse = "/"), sep = "/")
# Query FSF API:
temp.url <- httr::modify_url("https://ridb.recreation.gov/", path = temp.path)
temp.resp <- httr::GET(temp.url, query = list(apikey = pkg.env$api.key, offset = startvals[2]))
# Parse response:
temp.parsed <- jsonlite::fromJSON(httr::content(temp.resp, as = "text", encoding = "UTF-8"))
# Extract data (remove metadata):
temp.return <- temp.parsed[[1]]
"GEOJSON" %in% colnames(temp.return)
geometry <- process.geometry(temp.return$GEOJSON)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
geometry <- process.geometry(temp.return$GEOJSON)
temp.return[,colnames(temp.return) != "GEOJSON"]
temp.return <- dplyr::bind_cols(temp.return[,colnames(temp.return) != "GEOJSON"], geometry)
parsed.remaining <- lapply(startvals[1:2], function(s){
# Create path:
temp.path <- paste("api", pkg.env$api.version, "facilities", paste(NULL, collapse = "/"), sep = "/")
# Query FSF API:
temp.url <- httr::modify_url("https://ridb.recreation.gov/", path = temp.path)
temp.resp <- httr::GET(temp.url, query = list(apikey = pkg.env$api.key, offset = s))
# Parse response:
temp.parsed <- jsonlite::fromJSON(httr::content(temp.resp, as = "text", encoding = "UTF-8"))
# Extract data (remove metadata):
temp.return <- temp.parsed[[1]]
# If GEOJSON data returned, process:
if ("GEOJSON" %in% colnames(temp.return)) {
# Process geometry data:
geometry <- process.geometry(temp.return$GEOJSON)
# Bind processed geometry data to non-geom data:
temp.return <- dplyr::bind_cols(temp.return[,colnames(temp.return) != "GEOJSON"], geometry)
}
return(temp.return)
})
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
parsed.remaining <- lapply(startvals[1:2], function(s){
# Create path:
temp.path <- paste("api", pkg.env$api.version, "facilities", paste(NULL, collapse = "/"), sep = "/")
# Query FSF API:
temp.url <- httr::modify_url("https://ridb.recreation.gov/", path = temp.path)
temp.resp <- httr::GET(temp.url, query = list(apikey = pkg.env$api.key, offset = s))
# Parse response:
temp.parsed <- jsonlite::fromJSON(httr::content(temp.resp, as = "text", encoding = "UTF-8"))
# Extract data and process geometry data (remove metadata):
temp.return <- process.geometry(temp.parsed[[1]])
return(temp.return)
})
# Combine parsed returns:
return.initial <- process.geometry(parsed[[1]])
# Combine parsed returns:
parsed.initial <- process.geometry(parsed[[1]])
return.full <- dplyr::bind_rows(list(parsed.initial, parsed.remaining))
return.full <- rbind((list(parsed.initial, parsed.remaining))
)
rbind((list(parsed.initial, parsed.remaining)))
rbind(c(parsed.initial, parsed.remaining))
return.full <- do.call(rbind, c(parsed.initial, parsed.remaining))
return.full <- do.call(rbind, list(parsed.initial, parsed.remaining))
list(parsed.initial, parsed.remaining)
return.full <- dplyr::bind_rows(c(parsed.initial, parsed.remaining))
return.full <- dplyr::bind_rows(list(parsed.initial, parsed.remaining))
dplyr::bind_rows(parsed.remaining)
return.full <- dplyr::bind_rows(append(parsed.initial, parsed.remaining))
class(parsed.initial)
class(parsed.remaining[[1]])
test <- c(parsed.initial, parsed.remaining)
View(test)
test <- c(t(parsed.initial), parsed.remaining)
test <- c(data.table(parsed.initial), parsed.remaining)
test <- c(data.frame(parsed.initial), parsed.remaining)
View(test)
test <- c(data.table::data.table(parsed.initial), parsed.remaining)
View(test)
test <- list(data.table::data.table(parsed.initial), parsed.remaining)
View(test)
# Combine parsed returns:
parsed.remainind[[1]] <- process.geometry(parsed[[1]])
# Combine parsed returns:
parsed.remaining[[3]] <- process.geometry(parsed[[1]])
return.full <- dplyr::bind_rows(parsed.remaining)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
test <- ridbAPI::ridb.query("activities", NULL)
test <- ridbAPI::ridb.query("activities", "6")
test <- ridbAPI::activities()
test <- ridbAPI::ridb.query("facilities", "10000167")
class(test)
View(test)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
test <- ridbAPI::ridb.query("facilities", "10000167")
View(test)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
test <- ridbAPI::ridb.query("facilities", "10000167")
View(test)
# Create path:
path <- paste("api", pkg.env$api.version, "facilities", paste("10000167", collapse = "/"), sep = "/")
# Query FSF API:
url <- httr::modify_url("https://ridb.recreation.gov/", path = path)
resp <- httr::GET(url, query = list(apikey = pkg.env$api.key))
# Parse response:
parsed <- jsonlite::fromJSON(httr::content(resp, as = "text", encoding = "UTF-8"))
length(parsed) == 0
length(parsed) == 2
class(parsed) == "list"
data.frame(parsed)
return.full <- process.geometry(parsed)
return.full <- data.table::data.table(t(parsed))
return.full <- process.geometry(return.full)
View(return.full)
#' Process geometry function
#'
#' This function process geometry returns from the FSF APIs:
#' @param data is the relevant data from parsed API response
#' @keywords process.geometry
#' @export
data <- return.full
"GEOJSON" %in% colnames(data)
geometry <- data$GEOJSON$COORDINATES
return.full <- process.geometry(parsed)
#' Process geometry function
#'
#' This function process geometry returns from the FSF APIs:
#' @param data is the relevant data from parsed API response
#' @keywords process.geometry
#' @export
data <- parsed
"GEOJSON" %in% colnames(data)
"GEOJSON" %in% names(data)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
return.full <- process.geometry(parsed)
data <- parsed
"GEOJSON" %in% names(data)
geometry <- data$GEOJSON$COORDINATES
type <- data$GEOJSON$TYPE
unique(type)[unique(type)!=""] %in% c("Point", "point", "POINT")
geometry <- lapply(geometry, function(x){
if(is.null(x)){
x <- c(0,0)
} else {
x <- x
}
})
geometry <- data$GEOJSON$COORDINATES
geometry.sf <- sf::st_set_crs(sf::st_as_sf(geometry, coords = c(1,2)), 4326)
geometry <- data.frame(do.call(rbind, geometry))
# Extract geometry data from parsed response:
geometry <- data$GEOJSON$COORDINATES
geometry <- data.frame(geometry)
# Convert to sfc:
geometry.sf <- sf::st_set_crs(sf::st_as_sf(geometry, coords = c(1,2)), 4326)
sf::st_as_sf(geometry, coords = c(1,2))
# Extract geometry data from parsed response:
geometry <- data$GEOJSON$COORDINATES
geometry <- data.frame(t(geometry))
# Convert to sfc:
geometry.sf <- sf::st_set_crs(sf::st_as_sf(geometry, coords = c(1,2)), 4326)
devtools::load_all()
return.full <- process.geometry(parsed)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
return.full <- process.geometry(parsed)
data <- parsed
"GEOJSON" %in% names(data)
geometry <- data$GEOJSON$COORDINATES
# Extract geometry type from parsed response:
type <- data$GEOJSON$TYPE
unique(type)[unique(type)!=""] %in% c("Point", "point", "POINT")
class(geometry) == "list"
geometry <- data.frame(t(geometry))
geometry.sf <- sf::st_set_crs(sf::st_as_sf(geometry, coords = c(1,2)), 4326)
data[,names(data) != "GEOJSON"]
data[names(data) != "GEOJSON"]
return.full <- data.frame(t(parsed))
return.full <- process.geometry(return.full)
data <- return.full
"GEOJSON" %in% names(data)
geometry <- data$GEOJSON$COORDINATES
return.full <- data.table::data.table(t(parsed))
return.full <- process.geometry(return.full)
data.table::data.table(t(parsed))
data <- return.full
"GEOJSON" %in% names(data)
geometry <- data$GEOJSON$COORDINATES
data$GEOJSON
data$GEOJSON$COORDINATES
View(data)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
return.full <- process.geometry(parsed)
return.full <- data.frame(process.geometry(parsed))
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
return.full <- process.geometry(parsed)
return.full <- data.frame(process.geometry(parsed))
View(return.full)
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
test <- ridbAPI::ridb.query("facilities", "10000167")
test <- ridbAPI::ridb.query("activities", NULL)
test <- ridbAPI::ridb.query("activities", "6")
system.time(test <- ridbAPI::ridb.query("facilities", NULL))
warnings()
sessionInfo()
install.packages("tidyverse")
sessionInfo()
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
sessionInfo()
pacman::p_load("tidyverse")
devtools::load_all()
ridbAPI::set.api.key("86893a42-b85f-4043-9d44-73b27600265b")
system.time(test <- ridbAPI::ridb.query("facilities", NULL))
